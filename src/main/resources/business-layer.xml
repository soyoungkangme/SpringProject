<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">




<!--
// @Component 처리함 
<bean id="boardDAO" class="com.ssamz.biz.BoradDAO"></bean>
<bean id="boardService" class="com.ssamz.biz.BoradServiceImpl"></bean>
    // 세터 인젝션 
    <property name="boardDAO" ref="boardDAO"></property>
    // 생성자 인젝션
    // <constructor-arg ref="boardDAO"></constructor-arg>
    // @Autowired 로 인젝션 처리함
</bean>
 -->
 <!-- 모든 Annotation 사용하기 위한 설정
 리스너로 컨트롤 객체보다 먼저 프리로딩된 ServiceImpl 객체가 메모리에 로딩됨 (@Service)
 상위 인터페이스인 Service 객체는 메모리 로딩 안함 -->
 <context:component-scan base-package="com.ssamz.biz"/>
 
 
 
 <!--AOP 설정 
 횡단관심 클래스의 실행 (생성X => 빈등록 또는 @Component)
 횡단 관심 클래스가 변하거나 내부 메서드가 바껴도 자바코드 수정 필요 없음, XML 만 수정 
  
 id : 필터링(포인트컷) 에 붙인 이름
 expression : 특정 메서드에만 동작시킬 조건 
 ref : 실행되는 횡단관심 클래스의 아이디 (log, transaction, exception)
 pointcut-ref : id (동작시킬 메서드) 선택 
 * , void, !void : 비즈니스 메서드의 반환타입 
*Impl.*(..) , *Impl.get*(..) : 횡단 관심 클래스의 메서드를 동작시킬 비즈니스 메서드 (모든 경우의 매개변수 타입, 개수)
aspect : 포인트컷과 어드바이스의 연결 -> 필터링된 비즈니스 메서드에 대하여 특정 시점에 횡단 관심 메서드 동작시켜라 

before, after, after-returning, after-throwing, around : 횡단관심 메서드가 핵심관심 메서드 기준으로 동작할 시점  
after-returning : 비즈니스 메서드의 반환값을 client뿐만 아니라 횡단 관심 메서드의 매개변수로도 받아서 사후처리 로직에서 사용 가능 
after-throwing : 비즈니스 동작에서 예외 발생시 사후에 특정 횡단 관심 객체 동작 => try~catch~finally 모든 비즈니스 메서드에서 안해도됨 
around : 비즈니스 메서드 앞뒤에 횡단 관심 메서드 동작 

returning : 비즈니스 메서드의 반환값, 횡단 관심 메서드의 매개변수
throwing : 비즈니스 메서드의 에러, 횡단 관심 메서드의 매개변수 
 -->
<!--
 <aop:config>
     <aop:pointcut id="allPointcut" expression="execution(* com.ssamz.biz..*Impl.*(..))"/>
     <aop:pointcut id="getPointcut" expression="execution(* com.ssamz.biz..*Impl.get*(..))"/>
     
     <aop:aspect ref="log">
         <aop:before pointcut-ref="allPointcut" method="printLog"/>
     </aop:aspect>
     
     <aop:aspect ref="afterReturning">
         <aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj"/>
     </aop:aspect>
     
     <aop:aspect ref="afterThrowing">
         <aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj"/>
     </aop:aspect>
     
     <aop:aspect ref="around">
         <aop:around pointcut-ref="allPointcut" method="aroundLog"/>
     </aop:aspect>
 </aop:config>
-->
<!-- AOP 관련된 Annotation 사용하기 위한 설정 
- 횡단관심 메서드의 이름 바뀌어도 xml 파일 수정 필요 없음
- @Service 하나로 사전/사후처리 on/off 할 수 있음 
-->
<aop:aspectj-autoproxy/>



<!-- 외부 프로퍼티스 파일로 데이터소스 설정 
value : 에 값 말고 키값 넣으면 프로퍼티스 파일의 값이 동작 -->
<context:property-placeholder location="classpath:datasource.properties"/>
<!-- 
DataSource : 커넥션 정보 가진 객체, 특정 DBMS와 커넥션 위한 네개의 정보 세터 인젝션으로 넘겨주기 
JdbcTemplate : JDBC API를 자바 한줄로 작성할 메서드 가진 객체, dataSource(DBMS 커넥션) 세터 인젝션으로 넘겨주기 
destroy-method : 빈등록한 객체 삭제되기 직전 호출 (커넥션 닫기)
${properties의 키값} : 자바소스 변경 없이 디비 변경하기 위해  
-->
<bean id="dataSource" 
      class="org.apache.commons.dbcp.BasicDataSource"
      destroy-method="close">
    <property name="driverClassName"  value="${jdbc.driverClassName}"/>
    <property name="url"              value="${jdbc.url}"/>
    <property name="username"         value="${jdbc.username}"/>
    <property name="password"         value="${jdbc.password}"/>
</bean>
<!-- JDBC 템플릿 등록 -->
<bean class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
</bean>



<!-- 디비연동 변경 자바소스 변경 없이 하기 위해 @Repository 대신 빈등록
BoardDAO 를 implements 한 객체 중 하나만 메모리에 떠야함 -->
<bean class="com.ssamz.biz.board.BoardDAOSpring"></bean>
<bean class="com.ssamz.biz.user.UserDAOSpring"></bean>



 <!-- Transaction 관리하는 객체 메모리에 생성 (doCommit(), doRollback()), Namespaces tx 추가 -->
 <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/> 
 </bean>
 <!-- txAcivicd 객체 메모리 로딩
 -> doCommit(), doRollback() 호출 해줌 (모든 비즈니스 메서드에 대해 예외 발생하면 rollback, 예외 없으면 자동 commit 따로 설정 없음)
 너무 복잡해서 어드바이스 클래스 중 유일하게 우리가 안만들고 XML 설정으로 자동 생성 -->
 <tx:advice id="txAdvice" transaction-manager="txManager">
     <tx:attributes>
         <tx:method name="*" rollback-for="Exception"/>
     </tx:attributes>
 </tx:advice>
 <!-- 어드바이스와 포인트컷의 연결에서 유일하게 aspect 아닌 advisor 사용 (어드바이스 클래스의 메서드 이름 모르므로 aspect 사용 불가) 
 비즈니스 메서드 실행 후에 예외발생 했을때 동작하는 것이므로 before  -->
 <aop:config>
     <aop:pointcut id="txPointcut" expression="execution(* com.ssamz.biz..*Impl.*(..))"/>
     <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
 </aop:config>

 
 
 </beans>